// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: quote-of-the-day.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { DateResponse } from "./date";

export const protobufPackage = "quote";

/** The BFF (or another orchestrator) passes both date & weather */
export interface QuoteRequest {
  date:
    | DateResponse
    | undefined;
  /** you could also import weather.WeatherResponse here */
  weather: string;
}

/** QuoteResponse carries the text, author, and the number of days since it was originally said. */
export interface QuoteResponse {
  quote: string;
  author: string;
  daysSince: number;
}

function createBaseQuoteRequest(): QuoteRequest {
  return { date: undefined, weather: "" };
}

export const QuoteRequest: MessageFns<QuoteRequest> = {
  encode(message: QuoteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== undefined) {
      DateResponse.encode(message.date, writer.uint32(10).fork()).join();
    }
    if (message.weather !== "") {
      writer.uint32(18).string(message.weather);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuoteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuoteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = DateResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weather = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuoteRequest {
    return {
      date: isSet(object.date) ? DateResponse.fromJSON(object.date) : undefined,
      weather: isSet(object.weather) ? globalThis.String(object.weather) : "",
    };
  },

  toJSON(message: QuoteRequest): unknown {
    const obj: any = {};
    if (message.date !== undefined) {
      obj.date = DateResponse.toJSON(message.date);
    }
    if (message.weather !== "") {
      obj.weather = message.weather;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuoteRequest>, I>>(base?: I): QuoteRequest {
    return QuoteRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuoteRequest>, I>>(object: I): QuoteRequest {
    const message = createBaseQuoteRequest();
    message.date = (object.date !== undefined && object.date !== null)
      ? DateResponse.fromPartial(object.date)
      : undefined;
    message.weather = object.weather ?? "";
    return message;
  },
};

function createBaseQuoteResponse(): QuoteResponse {
  return { quote: "", author: "", daysSince: 0 };
}

export const QuoteResponse: MessageFns<QuoteResponse> = {
  encode(message: QuoteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.quote !== "") {
      writer.uint32(10).string(message.quote);
    }
    if (message.author !== "") {
      writer.uint32(18).string(message.author);
    }
    if (message.daysSince !== 0) {
      writer.uint32(24).int32(message.daysSince);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QuoteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.quote = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.author = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.daysSince = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuoteResponse {
    return {
      quote: isSet(object.quote) ? globalThis.String(object.quote) : "",
      author: isSet(object.author) ? globalThis.String(object.author) : "",
      daysSince: isSet(object.daysSince) ? globalThis.Number(object.daysSince) : 0,
    };
  },

  toJSON(message: QuoteResponse): unknown {
    const obj: any = {};
    if (message.quote !== "") {
      obj.quote = message.quote;
    }
    if (message.author !== "") {
      obj.author = message.author;
    }
    if (message.daysSince !== 0) {
      obj.daysSince = Math.round(message.daysSince);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuoteResponse>, I>>(base?: I): QuoteResponse {
    return QuoteResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuoteResponse>, I>>(object: I): QuoteResponse {
    const message = createBaseQuoteResponse();
    message.quote = object.quote ?? "";
    message.author = object.author ?? "";
    message.daysSince = object.daysSince ?? 0;
    return message;
  },
};

export type QuoteServiceService = typeof QuoteServiceService;
export const QuoteServiceService = {
  /** Chooses a quote based on date + weather */
  getQuote: {
    path: "/quote.QuoteService/GetQuote",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QuoteRequest) => Buffer.from(QuoteRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => QuoteRequest.decode(value),
    responseSerialize: (value: QuoteResponse) => Buffer.from(QuoteResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => QuoteResponse.decode(value),
  },
} as const;

export interface QuoteServiceServer extends UntypedServiceImplementation {
  /** Chooses a quote based on date + weather */
  getQuote: handleUnaryCall<QuoteRequest, QuoteResponse>;
}

export interface QuoteServiceClient extends Client {
  /** Chooses a quote based on date + weather */
  getQuote(
    request: QuoteRequest,
    callback: (error: ServiceError | null, response: QuoteResponse) => void,
  ): ClientUnaryCall;
  getQuote(
    request: QuoteRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QuoteResponse) => void,
  ): ClientUnaryCall;
  getQuote(
    request: QuoteRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QuoteResponse) => void,
  ): ClientUnaryCall;
}

export const QuoteServiceClient = makeGenericClientConstructor(
  QuoteServiceService,
  "quote.QuoteService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): QuoteServiceClient;
  service: typeof QuoteServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
