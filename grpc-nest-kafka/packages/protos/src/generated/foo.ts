// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: foo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "protos";

/** The request message containing a generic payload. */
export interface GenericRequest {
  id: string;
  payload: string;
}

/** The response message containing a generic result. */
export interface GenericResponse {
  id: string;
  result: string;
}

function createBaseGenericRequest(): GenericRequest {
  return { id: "", payload: "" };
}

export const GenericRequest: MessageFns<GenericRequest> = {
  encode(message: GenericRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.payload !== "") {
      writer.uint32(18).string(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenericRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenericRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenericRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
    };
  },

  toJSON(message: GenericRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenericRequest>, I>>(base?: I): GenericRequest {
    return GenericRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenericRequest>, I>>(object: I): GenericRequest {
    const message = createBaseGenericRequest();
    message.id = object.id ?? "";
    message.payload = object.payload ?? "";
    return message;
  },
};

function createBaseGenericResponse(): GenericResponse {
  return { id: "", result: "" };
}

export const GenericResponse: MessageFns<GenericResponse> = {
  encode(message: GenericResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.result !== "") {
      writer.uint32(18).string(message.result);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenericResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenericResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.result = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenericResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      result: isSet(object.result) ? globalThis.String(object.result) : "",
    };
  },

  toJSON(message: GenericResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.result !== "") {
      obj.result = message.result;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenericResponse>, I>>(base?: I): GenericResponse {
    return GenericResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenericResponse>, I>>(object: I): GenericResponse {
    const message = createBaseGenericResponse();
    message.id = object.id ?? "";
    message.result = object.result ?? "";
    return message;
  },
};

/** The Foo service definition. */
export type FooServiceService = typeof FooServiceService;
export const FooServiceService = {
  /** Sends a generic request and receives a generic response. */
  genericMethod: {
    path: "/protos.FooService/GenericMethod",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GenericRequest) => Buffer.from(GenericRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GenericRequest.decode(value),
    responseSerialize: (value: GenericResponse) => Buffer.from(GenericResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GenericResponse.decode(value),
  },
} as const;

export interface FooServiceServer extends UntypedServiceImplementation {
  /** Sends a generic request and receives a generic response. */
  genericMethod: handleUnaryCall<GenericRequest, GenericResponse>;
}

export interface FooServiceClient extends Client {
  /** Sends a generic request and receives a generic response. */
  genericMethod(
    request: GenericRequest,
    callback: (error: ServiceError | null, response: GenericResponse) => void,
  ): ClientUnaryCall;
  genericMethod(
    request: GenericRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GenericResponse) => void,
  ): ClientUnaryCall;
  genericMethod(
    request: GenericRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GenericResponse) => void,
  ): ClientUnaryCall;
}

export const FooServiceClient = makeGenericClientConstructor(FooServiceService, "protos.FooService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): FooServiceClient;
  service: typeof FooServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
