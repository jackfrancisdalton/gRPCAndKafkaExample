// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: bff.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { DateResponse } from "./date";
import { QuoteResponse } from "./quote-of-the-day";

export const protobufPackage = "bff";

/** A single “dashboard” call that the frontend can use to get date, weather & quote in one go. */
export interface DashboardRequest {
}

export interface DashboardResponse {
  date: DateResponse | undefined;
  weather: string;
  quote: QuoteResponse | undefined;
}

function createBaseDashboardRequest(): DashboardRequest {
  return {};
}

export const DashboardRequest: MessageFns<DashboardRequest> = {
  encode(_: DashboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DashboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DashboardRequest {
    return {};
  },

  toJSON(_: DashboardRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DashboardRequest>, I>>(base?: I): DashboardRequest {
    return DashboardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DashboardRequest>, I>>(_: I): DashboardRequest {
    const message = createBaseDashboardRequest();
    return message;
  },
};

function createBaseDashboardResponse(): DashboardResponse {
  return { date: undefined, weather: "", quote: undefined };
}

export const DashboardResponse: MessageFns<DashboardResponse> = {
  encode(message: DashboardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== undefined) {
      DateResponse.encode(message.date, writer.uint32(10).fork()).join();
    }
    if (message.weather !== "") {
      writer.uint32(18).string(message.weather);
    }
    if (message.quote !== undefined) {
      QuoteResponse.encode(message.quote, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DashboardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDashboardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = DateResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.weather = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.quote = QuoteResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DashboardResponse {
    return {
      date: isSet(object.date) ? DateResponse.fromJSON(object.date) : undefined,
      weather: isSet(object.weather) ? globalThis.String(object.weather) : "",
      quote: isSet(object.quote) ? QuoteResponse.fromJSON(object.quote) : undefined,
    };
  },

  toJSON(message: DashboardResponse): unknown {
    const obj: any = {};
    if (message.date !== undefined) {
      obj.date = DateResponse.toJSON(message.date);
    }
    if (message.weather !== "") {
      obj.weather = message.weather;
    }
    if (message.quote !== undefined) {
      obj.quote = QuoteResponse.toJSON(message.quote);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DashboardResponse>, I>>(base?: I): DashboardResponse {
    return DashboardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DashboardResponse>, I>>(object: I): DashboardResponse {
    const message = createBaseDashboardResponse();
    message.date = (object.date !== undefined && object.date !== null)
      ? DateResponse.fromPartial(object.date)
      : undefined;
    message.weather = object.weather ?? "";
    message.quote = (object.quote !== undefined && object.quote !== null)
      ? QuoteResponse.fromPartial(object.quote)
      : undefined;
    return message;
  },
};

export type BffServiceService = typeof BffServiceService;
export const BffServiceService = {
  getDashboard: {
    path: "/bff.BffService/GetDashboard",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DashboardRequest) => Buffer.from(DashboardRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DashboardRequest.decode(value),
    responseSerialize: (value: DashboardResponse) => Buffer.from(DashboardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DashboardResponse.decode(value),
  },
} as const;

export interface BffServiceServer extends UntypedServiceImplementation {
  getDashboard: handleUnaryCall<DashboardRequest, DashboardResponse>;
}

export interface BffServiceClient extends Client {
  getDashboard(
    request: DashboardRequest,
    callback: (error: ServiceError | null, response: DashboardResponse) => void,
  ): ClientUnaryCall;
  getDashboard(
    request: DashboardRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DashboardResponse) => void,
  ): ClientUnaryCall;
  getDashboard(
    request: DashboardRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DashboardResponse) => void,
  ): ClientUnaryCall;
}

export const BffServiceClient = makeGenericClientConstructor(BffServiceService, "bff.BffService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BffServiceClient;
  service: typeof BffServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
